{"version":3,"sources":["index.js"],"names":["refs","timerAll","document","querySelector","Timer","selector","selectorTimer","daysText","children","hoursText","minsText","secsText","setInterval","nextTime","Date","result","secs","pad","Math","floor","mins","hours","days","textContent","timer","targetDate","timerRef","value","String","padStart","start"],"mappings":";AAuFA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAvFA,IAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,WAE7BC,EAAAA,WACsB,SAAA,EAAA,GAAZC,IAAAA,EAAAA,EAAAA,SAAY,EAAA,KAAA,GACnBA,KAAAA,SAAWA,EAEXC,KAAAA,cAAgBJ,SAASC,cAAcE,GAEvCE,KAAAA,SAAW,KAAKD,cAAcE,SAAS,GAAGA,SAAS,GACnDC,KAAAA,UAAY,KAAKH,cAAcE,SAAS,GAAGA,SAAS,GACpDE,KAAAA,SAAW,KAAKJ,cAAcE,SAAS,GAAGA,SAAS,GACnDG,KAAAA,SAAW,KAAKL,cAAcE,SAAS,GAAGA,SAAS,GA2E5D,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAxEE,MAAA,WAAQ,IAAA,EAAA,KACNI,YAAY,WACJC,IAAAA,EAAW,IAAIC,KAGjBC,EAFgB,IAAID,KAAK,KAAM,EAAG,GAAI,GAAI,GAAI,IAEvBD,EAIrBG,EAAOC,EAAIC,KAAKC,MAAOJ,EAAU,IAAc,MAG/CK,EAAOH,EAAIC,KAAKC,MAAOJ,EAAU,KAAoB,MAGrDM,EAAQJ,EAAIC,KAAKC,MAAOJ,EAAU,MAAyB,OAG3DO,EAAOL,EAAIC,KAAKC,MAAMJ,EAAU,QAS5BO,OAPV,EAAKf,SAASgB,YAAcD,EAAO,GAAQA,GAAAA,OAAAA,GAASA,EACpD,EAAKb,UAAUc,YAAcF,EAAQ,GAAQA,GAAAA,OAAAA,GAAUA,EACvD,EAAKX,SAASa,YAAcH,EAAO,GAAQA,GAAAA,OAAAA,GAASA,EACpD,EAAKT,SAASY,YAAcP,EAAO,GAAQA,GAAAA,OAAAA,GAASA,EAI1CM,GAAAA,OAAAA,EAAQD,KAAAA,OAAAA,EAASD,KAAAA,OAAAA,EAAQJ,KAAAA,OAAAA,IAElC,SA2CP,EApFMZ,GA6CAoB,EAAQ,IAAIpB,EAAM,CACtBC,SAAU,WACVoB,WAAY,IAAIX,KAAK,iBAOvB,SAASY,IACP1B,EAAKC,SAASsB,YAAiBD,GAAAA,OAAAA,KAAQD,KAAAA,OAAAA,MAASD,KAAAA,OAAAA,KAAQJ,KAAAA,OAAAA,MAG1D,SAASC,EAAIU,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KARnCL,EAAMM","file":"goit-js-hw-11-timer.0a719a16.js","sourceRoot":"..","sourcesContent":["const refs = {\r\n  timerAll: document.querySelector('.value'),\r\n};\r\nclass Timer {\r\n  constructor({ selector }) {\r\n    this.selector = selector;\r\n\r\n    this.selectorTimer = document.querySelector(selector);\r\n\r\n    this.daysText = this.selectorTimer.children[0].children[0];\r\n    this.hoursText = this.selectorTimer.children[1].children[0];\r\n    this.minsText = this.selectorTimer.children[2].children[0];\r\n    this.secsText = this.selectorTimer.children[3].children[0];\r\n  }\r\n\r\n  start() {\r\n    setInterval(() => {\r\n      const nextTime = new Date();\r\n      const currentTime = new Date(2021, 7, 18, 10, 10, 55);\r\n\r\n      let result = currentTime - nextTime;\r\n      // const timerTime = (result / 1000).toFixed(0);\r\n\r\n      //////////////////// Подсчет секунд ////////////////////\r\n      const secs = pad(Math.floor((result % (1000 * 60)) / 1000));\r\n\r\n      //////////////////// Подсчет минут ////////////////////\r\n      const mins = pad(Math.floor((result % (1000 * 60 * 60)) / (1000 * 60)));\r\n\r\n      //////////////////// Подсчет часов ////////////////////\r\n      const hours = pad(Math.floor((result % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n\r\n      //////////////////// Подсчет дней ////////////////////\r\n      const days = pad(Math.floor(result / (1000 * 60 * 60 * 24)));\r\n\r\n      this.daysText.textContent = days < 10 ? `${days}` : days;\r\n      this.hoursText.textContent = hours < 10 ? `${hours}` : hours;\r\n      this.minsText.textContent = mins < 10 ? `${mins}` : mins;\r\n      this.secsText.textContent = secs < 10 ? `${secs}` : secs;\r\n\r\n      //////////////////// Запуск таймера ////////////////////\r\n\r\n      return `${days}:${hours}:${mins}:${secs}`;\r\n      timerRef();\r\n    }, 1000);\r\n  }\r\n}\r\n\r\nconst timer = new Timer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Aug 9, 2021'),\r\n});\r\n\r\n//////////////////// Запуск таймера ////////////////////\r\ntimer.start();\r\n\r\n//////////////////// Виводим час в форматі 00:00:00:00 ////////////////////\r\nfunction timerRef() {\r\n  refs.timerAll.textContent = `${days}:${hours}:${mins}:${secs}`;\r\n}\r\n\r\nfunction pad(value) {\r\n  return String(value).padStart(2, '0');\r\n}\r\n\r\n/*\r\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n */\r\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n/*\r\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n * остатка % и делим его на количество миллисекунд в одном часе\r\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n */\r\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n/*\r\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n */\r\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n/*\r\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n * миллисекунд в одной секунде (1000)\r\n */"]}